rules:
- id: vuln-chamilo-lms-cc278f01
  pattern: '$curl = curl_init($URI);

    curl_setopt($curl, CURLOPT_FAILONERROR, true);

    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

    curl_setopt($curl, CURLOPT_TIMEOUT, $TIMEOUT);

    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);

    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER[''HTTP_USER_AGENT'']);

    $response = curl_exec($curl);

    curl_close($curl);

    '
  pattern-not: "$client = new Client();\ntry {\n  $response = $client->request('GET',\
    \ $URI, [\n    'timeout' => $TIMEOUT,\n    'verify' => false,\n    'headers' =>\
    \ [\n      'User-Agent' => $_SERVER['HTTP_USER_AGENT']\n    ]\n  ]);\n} catch\
    \ (Exception $e) {\n  return false;\n}\n"
  languages:
  - php
  message: 'Detected insecure cURL usage with SSL verification disabled. This can
    lead to Man-in-the-Middle (MITM) attacks as the connection is not properly verified.
    Replace cURL with GuzzleHttp\Client and ensure SSL verification is enabled or
    handle exceptions properly.

    '
  severity: ERROR
  metadata:
    source-url: https://github.com/chamilo/chamilo-lms/commit/cc278f01864948b1fb160e03f0a3dc0875d5f81f
    category: security
    cwe:
    - CWE-295
    owasp:
    - A03:2021-Injection
    references:
    - https://curl.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html
    - https://docs.guzzlephp.org/en/stable/request-options.html#verify
    technology:
    - php
- id: vuln-wordpress-af9f0520
  pattern: 'preg_match(''#^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$#'', $VAR)

    '
  pattern-not: 'preg_match(''#^(([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d)\.){3}([1-9]?\d|1\d\d|25[0-5]|2[0-4]\d)$#'',
    $VAR)

    '
  languages:
  - php
  message: 'The IP address validation regex is too permissive, allowing invalid IP
    addresses. This can lead to security issues such as bypassing IP-based restrictions.
    Use a more precise regex pattern to validate IP addresses correctly.

    '
  severity: ERROR
  metadata:
    source-url: https://github.com/WordPress/WordPress/commit/af9f0520875eda686fd13a427fd3914d7aded049
    category: security
    cwe:
    - CWE-185
    owasp:
    - A1:2017-Injection
    references:
    - https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html
    technology:
    - php
- id: vuln-wordpress-cea9e2dc
  pattern: 'substr(md5(time() . rand() . $VAR), 0, 16)

    '
  pattern-not: 'substr(md5(time() . wp_rand() . $VAR), 0, 16)

    '
  languages:
  - php
  message: "Detected the use of insecure `rand()` function for generating cryptographic\
    \ keys. \nThe `rand()` function is not cryptographically secure and can lead to\
    \ predictable values, \nmaking the generated keys vulnerable to brute-force attacks.\
    \ \nUse `wp_rand()` instead, which is designed to be cryptographically secure.\n"
  severity: ERROR
  metadata:
    source-url: https://github.com/WordPress/WordPress/commit/cea9e2dc62abf777e06b12ec4ad9d1aaa49b29f4
    category: security
    cwe:
    - CWE-330
    owasp:
    - 'A2: Cryptographic Failures'
    references:
    - https://www.php.net/manual/en/function.rand.php
    - https://developer.wordpress.org/reference/functions/wp_rand/
    technology:
    - php
- id: vuln-wordpress-e88a48a0
  pattern: "$defaults = array( 'post_status' => 'draft', 'post_type' => 'post', 'post_author'\
    \ => 0,\n  'post_password' => '', 'post_excerpt' => '', 'post_content' => '',\
    \ 'post_title' => '' );\n$post_data = wp_parse_args($content_struct, $defaults);\n"
  pattern-not: "$defaults = array(\n  'post_status'    => 'draft',\n  'post_type'\
    \      => 'post',\n  'post_author'    => null,\n  'post_password'  => null,\n\
    \  'post_excerpt'   => null,\n  'post_content'   => null,\n  'post_title'    \
    \ => null,\n  'post_date'      => null,\n  'post_date_gmt'  => null,\n  'post_format'\
    \    => null,\n  'post_name'      => null,\n  'post_thumbnail' => null,\n  'post_parent'\
    \    => null,\n  'ping_status'    => null,\n  'comment_status' => null,\n  'custom_fields'\
    \  => null,\n  'terms_names'    => null,\n  'terms'          => null,\n  'sticky'\
    \         => null,\n  'enclosure'      => null,\n  'ID'             => null,\n\
    );\n$post_data = wp_parse_args(array_intersect_key($content_struct, $defaults),\
    \ $defaults);\n"
  languages:
  - php
  message: 'The code is vulnerable to unauthorized data manipulation due to the direct
    use of `wp_parse_args` without filtering the input data. This can allow attackers
    to inject unexpected data into the `$post_data` array. The fix involves using
    `array_intersect_key` to ensure only valid keys from `$defaults` are included
    in the `$post_data` array.

    '
  severity: ERROR
  metadata:
    source-url: https://github.com/WordPress/WordPress/commit/e88a48a066ab2200ce3091b131d43e2fab2460a4
    category: security
    cwe:
    - CWE-20
    owasp:
    - 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Injection_Flaws
    technology:
    - php
- id: vuln-wordpress-develop-b1975463
  pattern: 'preg_split(''/:|&#0*58;|&#x0*3a;/i'', $VAR, 2)

    '
  pattern-not: 'preg_split(''/:|&#0*58;|&#x0*3a;|&colon;/i'', $VAR, 2)

    '
  languages:
  - php
  message: 'The use of a regular expression in preg_split that does not account for
    all variations of colon characters can lead to security vulnerabilities. Specifically,
    the pattern does not handle the HTML entity ''&colon;'', which could be exploited
    to bypass input sanitization. This can result in Cross-Site Scripting (XSS) or
    other injection attacks. To fix this, ensure that all possible representations
    of colons are included in the regular expression pattern.

    '
  severity: ERROR
  metadata:
    source-url: https://github.com/WordPress/wordpress-develop/commit/b1975463dd995da19bb40d3fa0786498717e3c53
    category: security
    cwe:
    - CWE-79
    owasp:
    - 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    - https://cwe.mitre.org/data/definitions/79.html
    technology:
    - php
- id: vuln-mediawiki-7f9fe1b2
  pattern: 'throw new MWException("Invalid message parameter: " . serialize($PARAM));

    '
  pattern-not: "trigger_error(\n  \"Invalid message parameter: \" . htmlspecialchars(serialize($PARAM)),\n\
    \  E_USER_WARNING\n);\nreturn array('before', '[INVALID]');\n"
  languages:
  - php
  message: 'The code directly throws an exception with a serialized parameter, which
    can lead to information disclosure or other security issues. The vulnerability
    occurs because sensitive data might be exposed in error messages. The fix involves
    using `trigger_error` with `htmlspecialchars` to sanitize the output and return
    a safe fallback value. This approach prevents sensitive data exposure and ensures
    proper error handling.

    '
  severity: ERROR
  metadata:
    source-url: https://github.com/wikimedia/mediawiki/commit/7f9fe1b29df6ecee9a9c90f6806d7bf8848ff0b1
    category: security
    cwe:
    - CWE-209
    owasp:
    - 'A3: Sensitive Data Exposure'
    technology:
    - php
