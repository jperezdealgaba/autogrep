rules:
- id: vuln-simplr-registration-form-d5884468
  pattern: 'echo add_query_arg($ARGS);

    '
  pattern-not: 'echo esc_url(add_query_arg($ARGS));

    '
  languages:
  - php
  message: "Detected unescaped URL output which can lead to XSS vulnerabilities. \n\
    Always use esc_url() to sanitize URLs before output to prevent malicious code\
    \ injection.\n"
  severity: ERROR
  metadata:
    source-url: github.com/wp-plugins/simplr-registration-form/commit/d588446844dd49232ab400ef213ff5b92121c33e
    category: security
    cwe:
    - CWE-79
    owasp:
    - 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://developer.wordpress.org/reference/functions/esc_url/
    technology:
    - php
- id: vuln-maxbuttons-e74564c9
  pattern: "if (isset($_GET['id']) && $_GET['id'] != '') {\n  ...\n}\n"
  pattern-not: "if (isset($_GET['id']) && $_GET['id'] != '' && intval($_GET['id'])\
    \ != 0) {\n  ...\n}\n"
  languages:
  - php
  message: 'Detected a potential security vulnerability where user input is not properly
    validated.

    The code checks if ''id'' is set and not empty but does not validate that it is
    a non-zero integer.

    This could lead to SQL injection or other security issues if the input is used
    in a query.

    To fix this, ensure that ''id'' is validated as a non-zero integer using intval().

    '
  severity: ERROR
  metadata:
    source-url: github.com/wp-plugins/maxbuttons/commit/e74564c9e3b7429808e317f4916bd1c26ef0b806
    category: security
    cwe:
    - CWE-89
    owasp:
    - 'A1: Injection'
    technology:
    - php
- id: vuln-i-recommend-this-058b3ef5
  pattern: "$request = \"SELECT * FROM $wpdb->posts, $wpdb->postmeta\";\n$request\
    \ .= \" WHERE $wpdb->posts.ID = $wpdb->postmeta.post_id\";\nif ($year != '') {\n\
    \    $request .= \" AND YEAR(post_date) = '$year'\";\n}\nif ($monthnum != '')\
    \ {\n    $request .= \" AND MONTH(post_date) = '$monthnum'\";\n}\n$request .=\
    \ \" AND post_status='publish' AND post_type='$post_type' AND meta_key='_recommended'\"\
    ;\n$request .= \" ORDER BY $wpdb->postmeta.meta_value+0 DESC LIMIT $number\";\n\
    $posts = $wpdb->get_results($request);\n"
  pattern-not: "$sql = \"SELECT * FROM $wpdb->posts, $wpdb->postmeta WHERE $wpdb->posts.ID\
    \ = $wpdb->postmeta.post_id\";\nif( '' !== $atts['year'] ) {\n    $sql .= ' AND\
    \ YEAR(post_date) = %d';\n    $params[] = $atts['year'];\n}\nif( '' !== $atts['monthnum']\
    \ ) {\n    $sql .= ' AND MONTH(post_date) = %d';\n    $params[] = $atts['monthnum'];\n\
    }\n$sql .= \" AND post_status = 'publish' AND post_type = %s AND meta_key = '_recommended'\"\
    ;\n$params[] = $atts['post_type'];\n$sql .= \" ORDER BY {$wpdb->postmeta}.meta_value+0\
    \ DESC LIMIT %d\";\n$params[] = $atts['number'];\n$query = $wpdb->prepare( $sql,\
    \ $params );\n$posts = $wpdb->get_results( $query );\n"
  languages:
  - php
  message: "Detected SQL query concatenation with user input, which can lead to SQL\
    \ injection. \nUse prepared statements with placeholders to safely include user\
    \ input in SQL queries.\n"
  severity: ERROR
  metadata:
    source-url: github.com/wp-plugins/i-recommend-this/commit/058b3ef5c7577bf557557904a53ecc8599b13649
    category: security
    cwe:
    - CWE-89
    owasp:
    - 'A1: Injection'
    references:
    - https://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php
    technology:
    - php
