rules:
- id: vuln-simplesamlphp-a2326d75
  pattern: "if (!$OBJ->verify($KEY)) {\n  ...\n}\n"
  pattern-not: "if ($OBJ->verify($KEY) !== 1) {\n  ...\n}\n"
  languages:
  - php
  message: "The XML signature verification is vulnerable to type juggling attacks.\
    \ \nUsing a loose comparison (!) instead of a strict comparison (!==) can lead\
    \ to \nfalse positives when the verify method returns values other than 1 or 0.\
    \ \nAlways use strict comparison (=== or !==) when verifying cryptographic signatures.\n"
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/a2326d75dd14accaac162dd2cb30aaefcc1f9205
    category: security
    cwe:
    - CWE-697
    owasp:
    - A06:2021-Vulnerable and Outdated Components
    technology:
    - php
- id: vuln-simplesamlphp-e2d53086
  pattern: 'in_array($node, $this->validNodes)

    '
  pattern-not: 'in_array($node, $this->validNodes, true)

    '
  languages:
  - php
  message: 'The use of `in_array()` without the strict comparison flag can lead to
    type juggling vulnerabilities. This can allow unexpected values to pass validation
    checks, potentially leading to security issues. Always use the strict comparison
    flag (`true`) to ensure both value and type are checked.

    '
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/e2d53086abbb253efb24ddcb49b116246eb0b6ca
    category: security
    cwe:
    - CWE-843
    owasp:
    - 'A1: Injection'
    references:
    - https://www.php.net/manual/en/function.in-array.php
    technology:
    - php
- id: vuln-simplesamlphp-77df6a93
  pattern: '$iv = substr($key, 0, $ivSize);

    '
  pattern-not: '$iv = openssl_random_pseudo_bytes($ivSize);

    '
  languages:
  - php
  message: 'Using a non-random initialization vector (IV) derived from the key can
    compromise the security of encryption. This can lead to predictable ciphertext,
    making it easier for attackers to break the encryption. Always use a cryptographically
    secure random IV, such as one generated by `openssl_random_pseudo_bytes()`.

    '
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/77df6a932d46daa35e364925eb73a175010dc904
    category: security
    cwe:
    - CWE-329
    owasp:
    - A3:2017-Sensitive Data Exposure
    technology:
    - php
- id: vuln-simplesamlphp-47968d26
  pattern: "if (substr($PATH, -4) === '.php') {\n  ...\n}\n"
  pattern-not: "if (mb_strtolower(substr($PATH, -4), 'UTF-8') === '.php') {\n  ...\n\
    }\n"
  languages:
  - php
  message: "Detected a case-sensitive file extension check that can be bypassed using\
    \ case manipulation. \nThis vulnerability allows attackers to potentially execute\
    \ malicious PHP files with different \ncase extensions (e.g., .Php, .pHp). Use\
    \ mb_strtolower() with UTF-8 encoding to perform a \ncase-insensitive comparison.\n"
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/47968d26a2fd3ed52da70dc09210921d612ce44e
    category: security
    cwe:
    - 'CWE-178: Improper Handling of Case Sensitivity'
    owasp:
    - 'A1: Injection'
    technology:
    - php
- id: vuln-simplesamlphp-4bc62965
  pattern: "for ($i = 0; $i < $len; ++$i) {\n  $diff |= $known[$i] ^ $user[$i];\n\
    }\n"
  pattern-not: "for ($i = 0; $i < $len; $i++) {\n  $diff |= ord($known[$i]) ^ ord($user[$i]);\n\
    }\n"
  languages:
  - php
  message: 'The code performs a byte-by-byte comparison without using the `ord()`
    function, which can lead to timing attacks. Timing attacks can allow an attacker
    to infer the contents of sensitive data by measuring the time taken to perform
    operations. Always use `ord()` to ensure consistent timing when comparing strings.

    '
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/4bc629658e7b7d17c9ac3fe0da7dc5df71f1b85e
    category: security
    cwe:
    - CWE-208
    owasp:
    - 'A02: Cryptographic Failures'
    references:
    - https://owasp.org/www-community/vulnerabilities/Time-based_Security_Flaws
    technology:
    - php
- id: vuln-simplesamlphp-608f24c2
  pattern: 'sha1(floor(($time - $offset) / ($this->lifetime + $this->skew)).'':''.$this->secretSalt)

    '
  pattern-not: 'sha1($offset.'':''.floor(($time - $offset) / ($this->lifetime + $this->skew)).'':''.$this->secretSalt)

    '
  languages:
  - php
  message: 'The token generation is vulnerable to time-based attacks due to insufficient
    entropy in the hash input. The fixed version includes the offset in the hash input
    to increase entropy and prevent predictable token generation. Update the code
    to include the offset in the hash input as shown in the fixed version.

    '
  severity: ERROR
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/608f24c2d5afd70c2af050785d2b12f878b33c68
    category: security
    cwe:
    - CWE-330
    owasp:
    - A02:2021-Cryptographic Failures
    references:
    - https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure
    technology:
    - php
- id: vuln-simplesamlphp-952027dd
  pattern: '$hookinfo[''errors''][] = ''[core] You are running PHP version '' . phpversion()
    . ''. SimpleSAMLphp requires version >= 5.3. Please upgrade!'';

    '
  pattern-not: '$hookinfo[''errors''][] = ''[core] You are running an old PHP installation.
    Please check the requirements for your SimpleSAMLphp version and upgrade.'';

    '
  languages:
  - php
  message: 'The code directly exposes the PHP version in error messages, which can
    be leveraged by attackers to target known vulnerabilities in specific PHP versions.
    This information disclosure should be avoided to reduce the attack surface. Instead,
    use a more generic error message that does not reveal the exact PHP version.

    '
  severity: WARNING
  metadata:
    source-url: github.com/simplesamlphp/simplesamlphp/commit/952027dd7f794ff4b2d4f5eddf549c5b5070fa38
    category: security
    cwe:
    - 'CWE-209: Information Exposure Through an Error Message'
    owasp:
    - A6:2017-Security Misconfiguration
    technology:
    - php
