rules:
- id: vuln-wangle-3b17ba10
  pattern: 'auto $SOCKET = std::dynamic_pointer_cast<folly::AsyncSocket>($EXPR);

    '
  pattern-not: 'auto $SOCKET = std::dynamic_pointer_cast<folly::AsyncTransportWrapper>($EXPR);

    CHECK($SOCKET);

    '
  languages:
  - cpp
  message: 'Detected a potentially unsafe dynamic cast to `folly::AsyncSocket` without
    a subsequent null check. This can lead to null pointer dereferences if the cast
    fails. The fix involves casting to `folly::AsyncTransportWrapper` and adding a
    null check using `CHECK` to ensure the cast was successful. This prevents crashes
    and undefined behavior in case of a failed cast.

    '
  severity: ERROR
  metadata:
    source-url: github.com/facebook/wangle/commit/3b17ba10a82c71e7808760e027ac6af687e06074
    category: security
    cwe:
    - CWE-476
    owasp:
    - 'A9: Using Components with Known Vulnerabilities'
    references:
    - https://en.cppreference.com/w/cpp/memory/shared_ptr/dynamic_pointer_cast
    technology:
    - cpp
- id: vuln-hermes-a6dcafe6
  pattern: 'return $X.roundToDouble($Y);

    '
  pattern-not: 'double $VAL = $X.roundToDouble($Y);

    return std::isnan($VAL) ? std::numeric_limits<double>::quiet_NaN() : $VAL;

    '
  languages:
  - cpp
  message: 'Directly returning the result of `roundToDouble` without checking for
    NaN can lead to undefined behavior. The function `roundToDouble` may return NaN,
    which should be handled explicitly to ensure safe conversion. The fix involves
    checking for NaN and returning a safe value in such cases.

    '
  severity: ERROR
  metadata:
    source-url: github.com/facebook/hermes/commit/a6dcafe6ded8e61658b40f5699878cd19a481f80
    category: security
    cwe:
    - CWE-682
    owasp:
    - A03:2021 - Injection
    references:
    - https://en.cppreference.com/w/cpp/numeric/math/isnan
    technology:
    - cpp
- id: vuln-hermes-55e1b234
  pattern: 'llvm_unreachable("Invalid literal kind.");

    '
  pattern-not: 'break;

    '
  languages:
  - cpp
  message: "The use of `llvm_unreachable` in this context can lead to undefined behavior\
    \ if the code path is actually reached. \nThis is dangerous because it assumes\
    \ the code path is unreachable, which may not be true in all cases, potentially\
    \ causing crashes or unexpected behavior. \nReplace `llvm_unreachable` with a\
    \ proper handling mechanism, such as a `break` statement, to ensure safe execution.\n"
  severity: ERROR
  metadata:
    source-url: github.com/facebook/hermes/commit/55e1b2343f4deb1a1b5726cfe1e23b2068217ff2
    category: security
    cwe:
    - CWE-476
    owasp:
    - A9
    references:
    - https://llvm.org/docs/ProgrammersManual.html#assert-like-macros
    technology:
    - cpp
- id: vuln-hermes-2c7af7ec
  pattern: 'const uint32_t *$VAR = (const uint32_t *)$TABLESTART + $UINTVAL - $OP4;

    '
  pattern-not: 'const int32_t *$VAR = (const int32_t *)$TABLESTART + $UINTVAL - $OP4;

    '
  languages:
  - cpp
  message: 'Using unsigned integers for pointer arithmetic in switch statements can
    lead to incorrect branching due to overflow or underflow. This is dangerous because
    it can cause unexpected program behavior or security vulnerabilities. Use signed
    integers instead to handle both forward and backward branching correctly.

    '
  severity: ERROR
  metadata:
    source-url: github.com/facebook/hermes/commit/2c7af7ec481ceffd0d14ce2d7c045e475fd71dc6
    category: security
    cwe:
    - CWE-190
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    technology:
    - cpp
