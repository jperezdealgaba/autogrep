rules:
- id: vuln-tsmuxer-ea879f3b
  pattern: 'for (; *$CURBUFF == 0xFF && $CURBUFF < $NALEND; $CURBUFF++) $PAYLOAD +=
    0xFF;

    '
  pattern-not: 'for (; $CURBUFF < $NALEND && *$CURBUFF == 0xFF; $CURBUFF++) $PAYLOAD
    += 0xFF;

    '
  languages:
  - cpp
  message: 'The original code checks the value of the buffer before verifying its
    bounds, which can lead to out-of-bounds memory access. This is dangerous because
    it can cause crashes, undefined behavior, or even security vulnerabilities like
    arbitrary code execution. Always check buffer bounds before accessing the contents.
    Fix by swapping the order of the conditions in the loop.

    '
  severity: ERROR
  metadata:
    source-url: github.com/justdan96/tsMuxer/commit/ea879f3b915baa4f9d145ce44229f7b3b1952c30
    category: security
    cwe:
    - CWE-125
    - CWE-787
    owasp:
    - 'A1: Injection'
    technology:
    - cpp
- id: vuln-tsmuxer-380cca33
  pattern: 'return (int64_t)(($EXPR1 - ($EXPR2 != -1 ? $EXPR2 : $EXPR3)) / 90.0 +
    0.5);

    '
  pattern-not: "{\n  int64_t $VAR = $EXPR1 - ($EXPR2 != -1 ? $EXPR2 : $EXPR3);\n \
    \ return $VAR / 90.0 + ($VAR >= 0 ? 0.5 : -0.5);\n}\n"
  languages:
  - cpp
  message: 'The original code performs direct arithmetic operations on timestamps
    without proper handling of negative values, which can lead to incorrect time calculations.
    This is dangerous because it can cause synchronization issues and incorrect media
    playback. The fix involves explicitly handling negative values by using conditional
    logic to determine the correct rounding direction.

    '
  severity: ERROR
  metadata:
    source-url: github.com/justdan96/tsMuxer/commit/380cca33a2fc68b1f9e7a7c79302b13274ededcd
    category: security
    cwe:
    - 'CWE-682: Incorrect Calculation'
    owasp:
    - 'A9: Using Components with Known Vulnerabilities'
    technology:
    - cpp
