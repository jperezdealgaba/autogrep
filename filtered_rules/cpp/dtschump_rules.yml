rules:
- id: vuln-cimg-ac800339
  pattern: 'buffer.assign(cimg::abs($DY) * ($DX_BYTES + $ALIGN_BYTES),1,1,1,0);

    '
  pattern-not: 'buffer.assign($BUF_SIZE,1,1,1,0);

    '
  languages:
  - cpp
  message: 'This code calculates a buffer size based on multiplication of dynamic
    values, which can lead to integer overflow and subsequent memory corruption. The
    vulnerability occurs because the buffer size is computed as `cimg::abs(dy) * (dx_bytes
    + align_bytes)`, which can exceed the maximum allocatable size. This can be exploited
    to cause a denial of service or potentially execute arbitrary code. The fix replaces
    the dynamic calculation with a precomputed `buf_size` to ensure safe allocation.

    '
  severity: ERROR
  metadata:
    source-url: github.com/dtschump/CImg/commit/ac8003393569aba51048c9d67e1491559877b1d1
    category: security
    cwe:
    - CWE-190
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    technology:
    - cpp
- id: vuln-cimg-193abd7b
  pattern: 'const ulongT $FSIZ = $FILE ? cimg::type<ulongT>::max() : (ulongT)cimg::fsize($FILENAME);

    '
  pattern-not: 'const ulongT $FSIZ = $FILE ? (ulongT)cimg_max_file_size : (ulongT)cimg::fsize($FILENAME);

    '
  languages:
  - cpp
  message: 'Detected use of cimg::type<ulongT>::max() for file size calculation, which
    can lead to integer overflow or excessive memory allocation. This is dangerous
    as it allows processing of arbitrarily large files, potentially leading to denial
    of service or memory exhaustion. Use cimg_max_file_size instead to enforce a reasonable
    limit.

    '
  severity: ERROR
  metadata:
    source-url: github.com/dtschump/CImg/commit/193abd7b29f3686840a48702d26aa3bf29deac3e
    category: security
    cwe:
    - CWE-190
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    technology:
    - cpp
