rules:
- id: vuln-squid-4031c6c2
  pattern: "if ($L < 0 || $L > $MAX_LENGTH || $O + $L > $PACKET_SIZE || $O == 0) {\n\
    \    ...\n}\n"
  pattern-not: "if ($L < 0 || $L > $MAX_LENGTH) {\n    ...\n}\nelse if ($O <= 0 ||\
    \ $O > $PACKET_SIZE) {\n    ...\n}\nelse if ($L > $PACKET_SIZE - $O) {\n    ...\n\
    }\n"
  languages:
  - cpp
  message: 'Detected insecure bounds checking in NTLM authentication. The original
    check combined multiple conditions in a single if statement, which could lead
    to integer overflow or incorrect validation. This could allow attackers to bypass
    length checks or cause buffer overflows. Split the checks into separate conditions
    for each validation case: string length, offset validity, and remaining buffer
    space.

    '
  severity: ERROR
  metadata:
    source-url: github.com/squid-cache/squid/commit/4031c6c2b004190fdffbc19dab7cd0305a2025b7
    category: security
    cwe:
    - 'CWE-190: Integer Overflow or Wraparound'
    - 'CWE-787: Out-of-bounds Write'
    owasp: 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    - https://cwe.mitre.org/data/definitions/787.html
    technology:
    - cpp
- id: vuln-squid-f1657a9d
  pattern: "if (X509_NAME_oneline($FUNC($CERT.get()), $BUF, sizeof($BUF)))\n    return\
    \ $BUF;\n"
  pattern-not: "if (X509_NAME_oneline($FUNC($CERT.get()), $BUF, sizeof($BUF))) {\n\
    \    return html_quote($BUF);\n}\n"
  languages:
  - cpp
  message: 'Potential HTML injection vulnerability through unquoted certificate subject
    or issuer.

    The code returns raw certificate data without proper escaping, which could allow
    HTML/JS injection if the output is rendered in a web context.

    Fix by using html_quote() to properly escape the certificate data before returning
    it.

    '
  severity: ERROR
  metadata:
    source-url: github.com/squid-cache/squid/commit/f1657a9decc820f748fa3aff68168d3145258031
    category: security
    cwe:
    - CWE-79
    owasp:
    - 'A1: Injection'
    references:
    - https://www.openssl.org/docs/man1.1.1/man3/X509_NAME_oneline.html
    technology:
    - cpp
- id: vuln-squid-c62d2b43
  pattern: 'strcpy($DST, $SRC);

    '
  pattern-not: 'xstrncpy($DST, $SRC, sizeof($DST));

    '
  languages:
  - cpp
  message: "Detected unsafe use of strcpy() which can lead to buffer overflows. \n\
    Use xstrncpy() with proper size limits instead to prevent potential \nmemory corruption\
    \ and security vulnerabilities.\n"
  severity: ERROR
  metadata:
    source-url: github.com/squid-cache/squid/commit/c62d2b43ad4962ea44aa0c5edb4cc99cb83a413d
    category: security
    cwe:
    - CWE-120
    owasp: 'A8: Software and Data Integrity Failures'
    references:
    - https://wiki.sei.cmu.edu/confluence/display/c/STR30-C.+Do+not+use+the+strcpy%28%29+function
    technology:
    - cpp
- id: vuln-squid-6014c664
  pattern: '$VAR = dup($FD);

    assert($VAR > -1);

    '
  pattern-not: '$VAR = dupOrExit($FD);

    '
  languages:
  - cpp
  message: 'The code directly uses `dup()` without proper error handling, which can
    lead to undefined behavior if the system call fails. This is dangerous because
    it can cause the application to continue running in an inconsistent state. The
    fix involves using a wrapper function `dupOrExit` that properly handles errors
    by reporting them and exiting the process.

    '
  severity: ERROR
  metadata:
    source-url: github.com/squid-cache/squid/commit/6014c6648a2a54a4ecb7f952ea1163e0798f9264
    category: security
    cwe:
    - CWE-248
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://man7.org/linux/man-pages/man2/dup.2.html
    technology:
    - cpp
