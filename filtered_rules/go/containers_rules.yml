rules:
- id: vuln-podman-550cff9a
  pattern: "func readStatusUserNS($PID string) ([]string, error) {\n  $PATH := fmt.Sprintf(\"\
    /proc/%s/status\", $PID)\n  $ARGS := []string{\"nsenter\", \"-U\", \"-t\", $PID,\
    \ \"cat\", $PATH}\n  $CMD := exec.Command($ARGS[0], $ARGS[1:]...)\n  $OUTPUT,\
    \ $ERR := $CMD.CombinedOutput()\n  ...\n}\n"
  pattern-not: "func readStatus($PID string) ([]string, error) {\n  $PATH := fmt.Sprintf(\"\
    /proc/%s/status\", $PID)\n  $DATA, $ERR := ioutil.ReadFile($PATH)\n  ...\n}\n"
  languages:
  - go
  message: 'Detected use of nsenter to read process status files. This approach is
    vulnerable to security issues as it:

    1. Executes external commands

    2. Exposes potential privilege escalation vectors

    3. Can be manipulated via PID namespaces

    Instead, use direct file reading with proper permission checks.

    '
  severity: ERROR
  metadata:
    source-url: github.com/containers/podman/commit/550cff9aceef27ff7fdefe0b39badb760c7e5331
    category: security
    cwe:
    - CWE-78
    owasp:
    - 'A1: Injection'
    technology:
    - go
    references:
    - https://man7.org/linux/man-pages/man1/nsenter.1.html
    - https://man7.org/linux/man-pages/man2/pid_namespaces.7.html
- id: vuln-podman-d102d02e
  pattern: 'acquireCNILock(filepath.Join($CONFIG.Engine.TmpDir, $LOCKFILE))

    '
  pattern-not: 'acquireCNILock($CONFIG)

    '
  languages:
  - go
  message: 'Detected a potential security vulnerability where the CNI lock file is
    created in a temporary directory. This could lead to race conditions or security
    issues if the temporary directory is not properly secured. The issue has been
    fixed by creating the lock file in a dedicated CNI configuration directory. To
    fix this, ensure that the lock file is created in a secure, dedicated directory.

    '
  severity: ERROR
  metadata:
    source-url: github.com/containers/podman/commit/d102d02eb1cd135d877d946249a4fa1769ba17d0
    category: security
    cwe:
    - CWE-362
    owasp: A9:2017 - Using Components with Known Vulnerabilities
    technology:
    - go
- id: vuln-podman-0282f98b
  pattern: 'cmd := []string{"dd", ...}

    '
  pattern-not: 'cmd := []string{"/bin/dd", ...}

    '
  languages:
  - go
  message: 'Using ''dd'' without an absolute path can lead to command injection or
    execution of unintended binaries if the PATH is compromised. Always use absolute
    paths for system commands to prevent such vulnerabilities.

    '
  severity: ERROR
  metadata:
    source-url: github.com/containers/podman/commit/0282f98b3cabad5ff873dc7c391151854f1501b7
    category: security
    cwe:
    - CWE-78
    owasp:
    - A03:2021-Injection
    references:
    - https://cwe.mitre.org/data/definitions/78.html
    technology:
    - go
- id: vuln-podman-6ca857fe
  pattern: '$X, $ERR := archive.Tar($SOURCE, $COMPRESSION)

    '
  pattern-not: '$X, $ERR := chrootarchive.Tar($SOURCE, $OPTIONS, $CHROOT)

    '
  languages:
  - go
  message: 'Detected use of insecure `archive.Tar` function which does not chroot
    the archive process. This can lead to path traversal vulnerabilities where files
    outside the intended directory can be included in the tarball. Use `chrootarchive.Tar`
    instead to properly chroot the archive process and prevent path traversal.

    '
  severity: ERROR
  metadata:
    source-url: github.com/containers/podman/commit/6ca857feb07a5fdc96fd947afef03916291673d8
    category: security
    cwe:
    - CWE-22
    owasp:
    - 'A1: Injection'
    references:
    - https://github.com/containers/storage/pull/123
    technology:
    - go
