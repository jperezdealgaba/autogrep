rules:
- id: vuln-django-02e65928
  pattern: "filename = os.path.join($PATH, $NAME)\nif filename.endswith(('/', '\\\\\
    ')):\n  ...\n"
  pattern-not: "filename = self.target_filename($PATH, $NAME)\nif $NAME.endswith(('/',\
    \ '\\\\')):\n  ...\n"
  languages:
  - python
  message: Detected potential path traversal vulnerability. The code does not properly
    validate file paths, which could allow attackers to write files outside the intended
    directory. Use `target_filename` method to validate paths and prevent directory
    traversal.
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/02e6592835b4559909aa3aaaf67988fef435f624
    category: security
    cwe: CWE-22
    owasp: A1:2017-Injection
    references:
    - https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.archive.Archive
    technology:
    - python
- id: vuln-django-2eb86b01
  pattern: "if ($MODIFIED or settings.SESSION_SAVE_EVERY_REQUEST):\n    ...\n"
  pattern-not: "if ($MODIFIED or settings.SESSION_SAVE_EVERY_REQUEST) and not $EMPTY:\n\
    \    ...\n"
  languages:
  - python
  message: 'Detected a missing check for empty sessions in Django''s session middleware.
    This could lead to unnecessary session cookies being set, which may expose session
    information unnecessarily. The fix includes adding a check for empty sessions
    to prevent setting cookies when the session is empty.

    '
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/2eb86b01d7b59be06076f6179a454d0fd0afaff6
    category: security
    cwe: CWE-200
    owasp: A3:2017-Sensitive Data Exposure
    references:
    - https://docs.djangoproject.com/en/stable/topics/http/sessions/
    technology:
    - python
- id: vuln-django-42a66e96
  pattern: 're.compile(r''<.*?>|((?:\w[-\w]*|&.*?;)+)'', re.U | re.S)

    '
  pattern-not: 're.compile(r''<[^>]+?>|([^<>\s]+)'', re.S)

    '
  languages:
  - python
  message: 'Detected a potentially vulnerable regular expression pattern that can
    lead to catastrophic backtracking.

    This can cause performance issues or denial of service when processing certain
    inputs.

    Update the regex pattern to avoid catastrophic backtracking by using more specific
    patterns.

    '
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/42a66e969023c00536256469f0e8b8a099ef109d
    category: security
    cwe: CWE-400
    owasp: A3:2017-Sensitive Data Exposure
    references:
    - https://owasp.org/www-community/vulnerabilities/Regular_expression_Denial_of_Service_-_ReDoS
    technology:
    - python
- id: vuln-django-4dea4883
  pattern: "class $CLASS(HttpResponse):\n    status_code = $STATUS\n    def __init__(self,\
    \ redirect_to):\n        super($CLASS, self).__init__()\n        self['Location']\
    \ = iri_to_uri(redirect_to)\n"
  pattern-not: "class $CLASS(HttpResponseRedirectBase):\n    status_code = $STATUS\n\
    \    def __init__(self, redirect_to):\n        super($CLASS, self).__init__()\n\
    \        parsed = urlparse(redirect_to)\n        if parsed.scheme and parsed.scheme\
    \ not in self.allowed_schemes:\n            raise SuspiciousOperation(\"Unsafe\
    \ redirect to URL with scheme '%s'\" % parsed.scheme)\n        self['Location']\
    \ = iri_to_uri(redirect_to)\n"
  languages:
  - python
  message: 'Detected unsafe redirect in Django HttpResponse class. This can lead to
    open redirect vulnerabilities by allowing redirects to unsafe schemes like ''data:'',
    ''mailto:'', or ''file:''. To fix, ensure redirect schemes are validated against
    a whitelist of allowed schemes (e.g., ''http'', ''https'', ''ftp'') using HttpResponseRedirectBase.

    '
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d
    category: security
    cwe: CWE-601
    owasp: A1:2017-Injection
    references:
    - https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpResponseRedirect
    technology:
    - python
- id: vuln-django-e34f3c0e
  pattern: "if len($NEW_VALUE) >= len($VALUE):\n    ...\n"
  pattern-not: "if $VALUE.count('<') == $NEW_VALUE.count('<'):\n    ...\n"
  languages:
  - python
  message: 'Detected potential HTML tag stripping vulnerability. Comparing string
    lengths to determine if tags were stripped is unreliable and can lead to security
    issues. Instead, compare the count of ''<'' characters to ensure all tags are
    properly stripped.

    '
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/e34f3c0e9ee5fc9022428fe91640638bafd4cda7
    category: security
    cwe: CWE-116
    owasp: A03:2021-Injection
    technology:
    - python
- id: vuln-django-90363e38
  pattern: 'final_attrs = {''href'': mark_safe($URL)}

    '
  pattern-not: 'final_attrs = {''href'': smart_urlquote($URL)}

    '
  languages:
  - python
  message: "Detected unsafe use of `mark_safe` with URLs, which can lead to XSS vulnerabilities.\
    \ \nThe `mark_safe` function marks the URL as safe HTML, bypassing Django's escaping\
    \ mechanisms. \nUse `smart_urlquote` instead to properly escape URLs.\n"
  severity: ERROR
  metadata:
    source-url: github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78
    category: security
    cwe: CWE-79
    owasp: A7:2017-Cross-Site Scripting (XSS)
    references:
    - https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.safestring.mark_safe
    - https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.http.urlquote
    technology:
    - python
