rules:
- id: vuln-libmspack-4fd9ccaa
  pattern: '#define TOLOWER($X) ((($X)<0||($X)>256)?($X):mspack_tolower_map[($X)])

    '
  pattern-not: '#define TOLOWER($X) ((($X)<0||($X)>255)?($X):mspack_tolower_map[($X)])

    '
  languages:
  - c
  message: 'The TOLOWER macro has an off-by-one error in its bounds check, allowing
    an out-of-bounds array access when the input is exactly 256. This can lead to
    undefined behavior, memory corruption, or potential security vulnerabilities.
    Fix the condition to check for values greater than 255 instead of 256.

    '
  severity: ERROR
  metadata:
    source-url: github.com/kyz/libmspack/commit/4fd9ccaa54e1aebde1e4b95fb0163b699fd7bcc8
    category: security
    cwe:
    - CWE-125
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/125.html
    technology:
    - c
- id: vuln-libmspack-2f084136
  pattern: "if (memcmp(&$NAME[2], &$CONTENT_NAME[2], 31L) == 0) {\n  if (memcmp(&$NAME[33],\
    \ &$CONTENT_NAME[33], 8L) == 0) {\n    $CHM->sec1.content = $FI;\n  }\n  else\
    \ if (memcmp(&$NAME[33], &$CONTROL_NAME[33], 11L) == 0) {\n    $CHM->sec1.control\
    \ = $FI;\n  }\n  else if (memcmp(&$NAME[33], &$SPANINFO_NAME[33], 8L) == 0) {\n\
    \    $CHM->sec1.spaninfo = $FI;\n  }\n  else if (memcmp(&$NAME[33], &$RTABLE_NAME[33],\
    \ 72L) == 0) {\n    $CHM->sec1.rtable = $FI;\n  }\n}\n"
  pattern-not: "if ($NAME_LEN == 40 && memcmp($NAME, $CONTENT_NAME, 40) == 0) {\n\
    \  $CHM->sec1.content = $FI;\n}\nelse if ($NAME_LEN == 44 && memcmp($NAME, $CONTROL_NAME,\
    \ 44) == 0) {\n  $CHM->sec1.control = $FI;\n}\nelse if ($NAME_LEN == 41 && memcmp($NAME,\
    \ $SPANINFO_NAME, 41) == 0) {\n  $CHM->sec1.spaninfo = $FI;\n}\nelse if ($NAME_LEN\
    \ == 105 && memcmp($NAME, $RTABLE_NAME, 105) == 0) {\n  $CHM->sec1.rtable = $FI;\n\
    }\n"
  languages:
  - c
  message: 'Detected a potentially unsafe memory comparison using memcmp with hardcoded
    offsets.

    This can lead to incorrect comparisons and security vulnerabilities if the input
    lengths are not properly validated.

    Always ensure that the lengths of the strings being compared are explicitly checked
    before using memcmp.

    '
  severity: ERROR
  metadata:
    source-url: github.com/kyz/libmspack/commit/2f084136cfe0d05e5bf5703f3e83c6d955234b4d
    category: security
    cwe:
    - CWE-125
    - CWE-787
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/125.html
    - https://cwe.mitre.org/data/definitions/787.html
    technology:
    - c
- id: vuln-libmspack-17038206
  pattern: 'unsigned int $LEN;

    $LEN = $READ($FH, &$BUF[0], $SIZE);

    '
  pattern-not: "int $LEN;\nif (($LEN = $READ($FH, &$BUF[0], $SIZE)) <= 0) {\n  $ERROR\
    \ = $ERR_CODE;\n  return $NULL;\n}\n"
  languages:
  - c
  message: 'The vulnerability occurs when the return value of a read operation is
    not checked for errors or negative values, which can lead to undefined behavior
    or security issues. In the original code, the return value of `sys->read` was
    stored in an `unsigned int` variable, making it impossible to detect errors or
    EOF conditions. This can result in incorrect processing of the buffer or potential
    out-of-bounds access. The fix involves checking if the return value is less than
    or equal to 0 and handling the error appropriately. Always validate the return
    value of read operations to ensure proper error handling and avoid undefined behavior.

    '
  severity: ERROR
  metadata:
    source-url: github.com/kyz/libmspack/commit/17038206fcc384dcee6dd9e3a75f08fd3ddc6a38
    category: security
    cwe:
    - 'CWE-252: Unchecked Return Value'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    technology:
    - c
- id: vuln-libmspack-7cadd489
  pattern: "char *create_output_name(unsigned char *fname, unsigned char *dir, int\
    \ lower, int isunix, int utf8) {\n  ...\n  if (!(name = (unsigned char *) malloc(x\
    \ + 2))) {\n    fprintf(stderr, \"out of memory!\\n\");\n    return NULL;\n  }\n\
    \  ...\n  /* remove leading slashes */\n  while (*fname == sep) fname++;\n  ...\n\
    \  return (char *) name;\n}\n"
  pattern-not: "char *create_output_name(char *fname) {\n  ...\n  while (*fname ==\
    \ '/' || *fname == '\\\\') fname++;\n  ...\n  for (p = out; *p; p++) {\n    if\
    \ (p[0] == '.' && p[1] == '.' && (p[2] == '/' || p[2] == '\\\\')) {\n       p[0]\
    \ = p[1] = 'x';\n    }\n  }\n  ...\n  return out;\n}\n"
  languages:
  - c
  message: 'The function `create_output_name` is vulnerable to path traversal attacks
    due to insufficient validation of the input filename. The original implementation
    only removes leading slashes but does not prevent directory traversal sequences
    like "../". This can allow an attacker to write files to arbitrary locations on
    the filesystem. The fix ensures that "../" sequences are replaced with "xx/" to
    prevent traversal. Use the fixed version to mitigate this vulnerability.

    '
  severity: ERROR
  metadata:
    source-url: github.com/kyz/libmspack/commit/7cadd489698be117c47efcadd742651594429e6d
    category: security
    cwe:
    - CWE-22
    - CWE-73
    owasp: A1:2017-Injection
    references:
    - https://cwe.mitre.org/data/definitions/22.html
    - https://cwe.mitre.org/data/definitions/73.html
    technology:
    - c
