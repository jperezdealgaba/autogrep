rules:
- id: vuln-libarchive-d24e79e8
  pattern: "static int $FUNC(struct archive_read *$A) {\n  int $RET = ARCHIVE_OK;\n\
    \  $RET = archive_write_free($A->extract->ad);\n  free($A->extract);\n  $A->extract\
    \ = NULL;\n  return ($RET);\n}\n"
  pattern-not: "static int $FUNC(struct archive_read *$A) {\n  int $RET = ARCHIVE_OK;\n\
    \  if ($A->extract->ad != NULL) {\n    $RET = archive_write_free($A->extract->ad);\n\
    \  }\n  free($A->extract);\n  $A->extract = NULL;\n  return ($RET);\n}\n"
  languages:
  - c
  message: 'Detected a potential NULL pointer dereference in archive_read_extract_cleanup
    function. The function directly calls archive_write_free without checking if a->extract->ad
    is NULL, which can lead to a crash. The fix involves adding a NULL check before
    calling archive_write_free.

    '
  severity: ERROR
  metadata:
    source-url: github.com/libarchive/libarchive/commit/d24e79e8f9547ae475a3a0c9516e079a14010838
    category: security
    cwe:
    - CWE-476
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/476.html
    technology:
    - c
- id: vuln-libarchive-a550daee
  pattern: "$NUMBERS[$ARGC++] = $EXPR;\nif ($ARGC > $MAX_PACK_ARGS) {\n  ...\n}\n"
  pattern-not: "if ($ARGC >= $MAX_PACK_ARGS) {\n  $NUMBERS[$ARGC++] = $EXPR;\n  ...\n\
    }\n"
  languages:
  - c
  message: 'The code increments the array index before checking the bounds, which
    can lead to an out-of-bounds write. This is dangerous because it can result in
    memory corruption, potentially leading to crashes, data corruption, or even remote
    code execution. To fix this, ensure the bounds check is performed before incrementing
    the array index.

    '
  severity: ERROR
  metadata:
    source-url: github.com/libarchive/libarchive/commit/a550daeecf6bc689ade371349892ea17b5b97c77
    category: security
    cwe:
    - CWE-787
    owasp:
    - 'A1: Injection'
    technology:
    - c
- id: vuln-libarchive-65a23f5d
  pattern: '*$BUFF = __archive_read_ahead($A, 1, &$BYTES_AVAIL);

    '
  pattern-not: '*$BUFF = __archive_read_ahead($A, $MINIMUM, &$BYTES_AVAIL);

    '
  languages:
  - c
  message: 'The use of a hardcoded value ''1'' in __archive_read_ahead can lead to
    performance issues and potential security vulnerabilities. This forces the decompressor
    to combine reads by copying data, which can be inefficient and may lead to buffer
    overflows or other memory-related issues. Use a dynamic minimum value instead
    to ensure proper handling of available bytes.

    '
  severity: ERROR
  metadata:
    source-url: github.com/libarchive/libarchive/commit/65a23f5dbee4497064e9bb467f81138a62b0dae1
    category: security
    cwe:
    - CWE-120
    owasp:
    - 'A2: Insecure Design'
    references:
    - https://cwe.mitre.org/data/definitions/120.html
    technology:
    - c
- id: vuln-libarchive-b31744df
  pattern: "static time_t $T;\ntime_t $A;\nif ($T == 0) {\n  $A = 1;\n  while ($A\
    \ > $T) {\n    $T = $A;\n    $A = $A * 2 + 1;\n  }\n}\n"
  pattern-not: "if (((time_t)0) < ((time_t)-1)) {\n  return (~(time_t)0);\n} else\
    \ {\n  const uintmax_t $MAX_UNSIGNED_TIME_T = (uintmax_t)(~(time_t)0);\n  const\
    \ uintmax_t $MAX_SIGNED_TIME_T = $MAX_UNSIGNED_TIME_T >> 1;\n  return (time_t)$MAX_SIGNED_TIME_T;\n\
    }\n"
  languages:
  - c
  message: "Detected unsafe time_t computation that may lead to incorrect time handling.\
    \ \nThe original code attempts to compute the maximum value of time_t by iterating,\n\
    which can result in undefined behavior or incorrect results on different systems.\n\
    The fix properly handles both signed and unsigned time_t types according to POSIX\
    \ conventions.\nReplace with the fixed code that checks if time_t is signed or\
    \ unsigned and returns the appropriate maximum value.\n"
  severity: ERROR
  metadata:
    source-url: github.com/libarchive/libarchive/commit/b31744df71084a8734f97199e42418f55d08c6c5
    category: security
    cwe:
    - CWE-190
    owasp:
    - 'A2: Cryptographic Failures'
    references:
    - https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_types.h.html
    technology:
    - c
