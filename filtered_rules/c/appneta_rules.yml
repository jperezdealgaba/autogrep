rules:
- id: vuln-tcpreplay-b63f1697
  pattern: "void fix_ipv4_length(struct pcap_pkthdr *$PKTHDR, ipv4_hdr_t *$IP_HDR)\
    \ {\n  if (!$IP_HDR->ip_len)\n    $IP_HDR->ip_len = htons((uint16_t)$PKTHDR->len);\n\
    }\n"
  pattern-not: "int fix_ipv4_length(struct pcap_pkthdr *$PKTHDR, ipv4_hdr_t *$IP_HDR,\
    \ const size_t $L2LEN) {\n  int $IP_LEN = (int)ntohs($IP_HDR->ip_len);\n  int\
    \ $IP_LEN_WANT = (int)($PKTHDR->len - $L2LEN);\n\n  if ($PKTHDR->caplen < $L2LEN\
    \ + sizeof(*$IP_HDR))\n    return -1;\n\n  if ((htons($IP_HDR->ip_off) & (IP_MF\
    \ | IP_OFFMASK)) == 0 &&\n      $IP_LEN != $IP_LEN_WANT) {\n    $IP_HDR->ip_len\
    \ = htons($IP_LEN_WANT);\n    return 1;\n  }\n\n  return 0;\n}\n"
  languages:
  - c
  message: 'The original version of `fix_ipv4_length` does not properly validate the
    IP header length against the packet capture length, which can lead to incorrect
    IP header length calculations and potential security issues. The fixed version
    includes proper validation and handling of the IP header length. Use the updated
    version to ensure correct IP header length calculations.

    '
  severity: ERROR
  metadata:
    source-url: github.com/appneta/tcpreplay/commit/b63f1697c9eae73c7880882e14f9a0ec9545f19a
    category: security
    cwe:
    - CWE-20
    owasp: 'A1: Injection'
    technology:
    - c
- id: vuln-tcpreplay-e2ac765a
  pattern: 'fix_ipv4_checksums($TC, $PKT, $IP)

    '
  pattern-not: 'fix_ipv4_checksums($TC, $PKT, $IP, $L2LEN)

    '
  languages:
  - c
  message: 'The function `fix_ipv4_checksums` is called without the `l2len` parameter,
    which can lead to incorrect checksum calculations due to missing layer 2 length
    validation. This can result in corrupted packets or security vulnerabilities.
    Always include the `l2len` parameter to ensure proper packet length validation.

    '
  severity: ERROR
  metadata:
    source-url: github.com/appneta/tcpreplay/commit/e2ac765a25e902728b6d4a825358aa536e6668c2
    category: security
    cwe:
    - CWE-120
    owasp: A9:2021-Security Misconfiguration
    technology:
    - c
- id: vuln-tcpreplay-ff0ece88
  pattern: "if ((size_t)$LEN < sizeof($ETH_HDR)) {\n    errx(-1, \"packet capture\
    \ length %d too small to process\", $LEN);\n    return NULL;\n}\n"
  pattern-not: "if ($LEN < (int)sizeof($ETH_HDR)) {\n    goto len_error;\n}\n"
  languages:
  - c
  message: 'The code performs an incorrect size comparison by casting the length to
    `size_t`, which can lead to integer underflow and bypassing of the length check.
    This can result in processing packets that are too small, potentially leading
    to memory corruption or crashes. Always ensure length checks are performed with
    the correct type to avoid underflow issues.

    '
  severity: ERROR
  metadata:
    source-url: github.com/appneta/tcpreplay/commit/ff0ece886576663f2fa18f375fed91f0f38fea20
    category: security
    cwe:
    - CWE-190
    owasp: 'A2: Cryptographic Failures'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    technology:
    - c
- id: vuln-tcpreplay-6fb578d2
  pattern: "if (memcmp($PKTDATA, \"MGC\", 3)) {\n  warnx(\"No Magic Number found:\
    \ %s (0x%x)\", ...);\n}\n"
  pattern-not: "if (memcmp($PKTDATA, JUNIPER_PCAP_MAGIC, 3)) {\n  warnx(\"No Magic\
    \ Number found during protocol lookup: %s (0x%x)\", ...);\n  return 0;\n}\n"
  languages:
  - c
  message: 'The code uses a hardcoded string "MGC" for magic number comparison, which
    can lead to inconsistent error handling and potential security issues. The fixed
    version uses a defined constant JUNIPER_PCAP_MAGIC and ensures proper error handling
    by returning 0 when the magic number is not found. Always use defined constants
    for such comparisons and ensure consistent error handling.

    '
  severity: ERROR
  metadata:
    source-url: github.com/appneta/tcpreplay/commit/6fb578d20feccffd4bae9f3d0216d1c3507bd805
    category: security
    cwe:
    - CWE-547
    owasp:
    - 'A9: Using Components with Known Vulnerabilities'
    references:
    - https://cwe.mitre.org/data/definitions/547.html
    technology:
    - c
- id: vuln-tcpreplay-46cf964a
  pattern: 'packet += l2offset;

    l2len -= l2offset;

    pkt_len -= l2offset;

    '
  pattern-not: 'packet = data + l2len;

    l2len = ...;

    pkt_len = ...;

    '
  languages:
  - c
  message: 'The vulnerability involves incorrect pointer arithmetic when adjusting
    packet data pointers using `l2offset`. This can lead to memory corruption or invalid
    memory access. The patch removes the use of `l2offset` and directly uses `data
    + l2len` for pointer adjustments, ensuring correct memory access. To fix this,
    avoid using `l2offset` for pointer arithmetic and use `data + l2len` instead.

    '
  severity: ERROR
  metadata:
    source-url: github.com/appneta/tcpreplay/commit/46cf964a7db636da76abeebf10482acf6f682a87
    category: security
    cwe:
    - CWE-119
    owasp: 'A1: Injection'
    technology:
    - c
