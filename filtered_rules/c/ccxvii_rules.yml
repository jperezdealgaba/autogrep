rules:
- id: vuln-mujs-fa3d30fd
  pattern: '$ALLOC = alloc($CTX, $NULL, (count($NODE) + $NUM) * sizeof($TYPE));

    '
  pattern-not: '$ALLOC = alloc($CTX, $NULL, $N * sizeof($TYPE));

    '
  languages:
  - c
  message: 'This pattern detects potential integer overflow vulnerabilities in memory
    allocation due to unchecked arithmetic operations. The original code calculates
    the size of memory to allocate based on a count function without checking if the
    result exceeds a safe limit (MAXPROG). This can lead to buffer overflows or memory
    corruption. The fix introduces bounds checking to ensure the calculated size is
    within safe limits before allocation. Always validate arithmetic operations that
    determine memory allocation sizes to prevent overflow vulnerabilities.

    '
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/fa3d30fd18c348bb4b1f3858fb860f4fcd4b2045
    category: security
    cwe:
    - CWE-190
    - CWE-787
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/190.html
    - https://cwe.mitre.org/data/definitions/787.html
    technology:
    - c
- id: vuln-mujs-00d4606c
  pattern: "if (!js_regexec($PROG, $TEXT, $M, $OPTS)) {\n  ...\n}\n"
  pattern-not: "$RESULT = js_regexec($PROG, $TEXT, $M, $OPTS);\nif ($RESULT < 0)\n\
    \  js_error($J, \"regexec failed\");\nif ($RESULT == 0) {\n  ...\n}\n"
  languages:
  - c
  message: 'The code directly uses the result of js_regexec without proper error handling.

    This can lead to undefined behavior if js_regexec fails. The function should

    always check for negative return values and handle them appropriately by

    calling js_error. This vulnerability can cause crashes or other unexpected

    behavior in the application. To fix this, always check the return value of

    js_regexec and handle errors properly.

    '
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/00d4606c3baf813b7b1c176823b2729bf51002a2
    category: security
    cwe:
    - 'CWE-252: Unchecked Return Value'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    technology:
    - c
- id: vuln-mujs-833b6f16
  pattern: "while (($P >= '0') && ($P <= '9')) {\n  ...\n}\n"
  pattern-not: "while (($P >= '0') && ($P <= '9') && $EXP < INT_MAX/10) {\n  ...\n\
    }\n"
  languages:
  - c
  message: "Detected a potential integer overflow vulnerability in a numeric parsing\
    \ loop. \nThe loop continues reading digits without checking if the accumulated\
    \ value exceeds INT_MAX, which can lead to integer overflow and undefined behavior.\
    \ \nTo fix this, add a check to ensure the accumulated value does not exceed INT_MAX/10\
    \ before multiplying by 10 and adding the new digit.\n"
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/833b6f1672b4f2991a63c4d05318f0b84ef4d550
    category: security
    cwe:
    - CWE-190
    owasp:
    - A2:2017-Broken Authentication
    technology:
    - c
- id: vuln-mujs-edb50ad6
  pattern: 'js_setproperty($J, $INDEX, $PROPERTY)

    '
  pattern-not: 'js_defproperty($J, $INDEX, $PROPERTY, 0)

    '
  languages:
  - c
  message: "The use of `js_setproperty` without specifying property flags can lead\
    \ to security vulnerabilities. \nThis function does not allow setting property\
    \ attributes like writable, enumerable, or configurable, \nwhich can result in\
    \ unintended behavior or security issues. Replace `js_setproperty` with \n`js_defproperty`\
    \ and specify appropriate flags to ensure proper property attributes are set.\n"
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/edb50ad66f7601ca9a3544a0e9045e8a8c60561f
    category: security
    cwe:
    - CWE-471
    owasp:
    - A12:2021-Security Misconfiguration
    technology:
    - c
- id: vuln-mujs-7ef066a3
  pattern: js_pushliteral($J, $OBJ->u.r.source);
  pattern-not: js_pushstring($J, $OBJ->u.r.source);
  languages:
  - c
  message: 'The use of `js_pushliteral` instead of `js_pushstring` can lead to potential
    security vulnerabilities.

    `js_pushliteral` may not handle string data correctly, leading to undefined behavior
    or memory corruption.

    Replace `js_pushliteral` with `js_pushstring` to ensure proper string handling
    and avoid potential vulnerabilities.

    '
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/7ef066a3bb95bf83e7c5be50d859e62e58fe8515
    category: security
    cwe:
    - CWE-119
    owasp:
    - 'A9: Using Components with Known Vulnerabilities'
    references:
    - https://cwe.mitre.org/data/definitions/119.html
    technology:
    - c
- id: vuln-mujs-25821e6d
  pattern: "if ($EXP < 0) {\n  ...\n}\nif ($EXP > $MAXEXPONENT) {\n  $EXP = $MAXEXPONENT;\n\
    \  errno = ERANGE;\n}\n"
  pattern-not: "if ($EXP < -$MAXEXPONENT) {\n  $EXP = $MAXEXPONENT;\n  $EXPSIGN =\
    \ TRUE;\n  errno = ERANGE;\n} else if ($EXP > $MAXEXPONENT) {\n  $EXP = $MAXEXPONENT;\n\
    \  $EXPSIGN = FALSE;\n  errno = ERANGE;\n} else if ($EXP < 0) {\n  ...\n}\n"
  languages:
  - c
  message: 'The code lacks proper handling of exponent values, which can lead to incorrect
    calculations or undefined behavior. The vulnerability occurs when the exponent
    value is not properly bounded, potentially causing out-of-range errors. The fix
    ensures that the exponent is clamped within a valid range and sets the appropriate
    error flag. To fix this, ensure that both lower and upper bounds are checked and
    handled correctly.

    '
  severity: ERROR
  metadata:
    source-url: github.com/ccxvii/mujs/commit/25821e6d74fab5fcc200fe5e818362e03e114428
    category: security
    cwe:
    - CWE-682
    owasp:
    - A03:2021-Injection
    technology:
    - c
