rules:
- id: vuln-netty-cd91cf3c
  pattern: "private static HAProxyTLV readNextTLV(final ByteBuf $HEADER) {\n    ...\n\
    \    final HAProxyTLV $TLV = readNextTLV($BUF);\n    ...\n}\n"
  pattern-not: "private static HAProxyTLV readNextTLV(final ByteBuf $HEADER, int $NESTING_LEVEL)\
    \ {\n    ...\n    if ($NESTING_LEVEL > MAX_NESTING_LEVEL) {\n        throw new\
    \ HAProxyProtocolException(...);\n    }\n    ...\n    final HAProxyTLV $TLV =\
    \ readNextTLV($BUF, $NESTING_LEVEL + 1);\n    ...\n}\n"
  languages:
  - java
  message: Recursive TLV parsing without nesting level check can lead to stack overflow.
    Add a nesting level check and throw an exception if the maximum level is exceeded.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/cd91cf3c99123bd1e53fd6a1de0e3d1922f05bb2
    category: security
    cwe:
    - CWE-674
    owasp: A1:2017-Injection
    technology:
    - java
- id: vuln-netty-c37c637f
  pattern: '$ESC.escape($VALUE)

    '
  pattern-not: '$ESC.escape($NAME, $VALUE)

    '
  languages:
  - java
  message: "Detected insecure header value escaping without proper error handling.\
    \ \nThe escape method should include the header name to provide better error context\
    \ \nwhen value conversion fails. This helps in debugging and prevents potential\
    \ \ninformation leakage. Update to use the version that includes the header name\
    \ as \na parameter.\n"
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/c37c637f096e7be3dffd36edee3455c8e90cb1b0
    category: security
    cwe: 'CWE-209: Information Exposure Through an Error Message'
    owasp: A03:2021 - Injection
    references:
    - https://netty.io/security.html
    technology:
    - java
- id: vuln-netty-f4d1df9c
  pattern: 'throw new IllegalArgumentException("Both ''Content-Length: " + $CONTENT_LENGTH
    + "'' and ''Transfer-Encoding: chunked'' found");

    '
  pattern-not: 'handleTransferEncodingChunkedWithContentLength($MESSAGE);

    '
  languages:
  - java
  message: 'Potential HTTP request smuggling vulnerability detected. Messages with
    both ''Transfer-Encoding: chunked'' and ''Content-Length'' headers should be handled
    appropriately, typically by removing the Content-Length header. Failure to do
    so could allow request smuggling or response splitting attacks.'
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/f4d1df9c5785d0cb8bdf430ddb813215c824d9bb
    category: security
    cwe:
    - CWE-444
    owasp:
    - A01:2021-Broken Access Control
    references:
    - https://tools.ietf.org/html/rfc7230#section-3.3.3
    technology:
    - java
- id: vuln-netty-41d3d61a
  pattern: "$UNCOMPRESSED = $CTX.alloc().buffer($BLOCK_LENGTH);\n...\nif (!$SUCCESS)\
    \ {\n    $UNCOMPRESSED.release();\n}\n"
  pattern-not: "$UNCOMPRESSED = $CTX.alloc().buffer($BLOCK_LENGTH);\n...\nif ($UNCOMPRESSED\
    \ != null) {\n    $UNCOMPRESSED.release();\n}\n"
  languages:
  - java
  message: Potential resource leak due to incorrect buffer release logic. Ensure buffers
    are properly released in all code paths.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/41d3d61a61608f2223bb364955ab2045dd5e4020
    category: security
    cwe: CWE-772
    owasp: A9
    technology: java
- id: vuln-netty-39cafcb0
  pattern: "if ($CH == ':' || Character.isWhitespace($CH)) {\n  ...\n}\n"
  pattern-not: "if ($CH == ':' || (!isDecodingRequest() && Character.isWhitespace($CH)))\
    \ {\n  ...\n}\n"
  languages:
  - java
  message: Incorrect handling of whitespace between header field-name and colon in
    HTTP headers. This can lead to security vulnerabilities in request routing and
    response handling. According to RFC 7230, servers MUST reject any request containing
    whitespace between a header field-name and colon with a 400 (Bad Request) response.
    Proxies MUST remove such whitespace before forwarding responses. Ensure proper
    validation of HTTP headers.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/39cafcb05c99f2aa9fce7e6597664c9ed6a63a95
    category: security
    cwe:
    - CWE-113
    owasp:
    - A1:2017-Injection
    references:
    - https://tools.ietf.org/html/rfc7230#section-3.2.4
    technology:
    - java
- id: vuln-netty-1543218d
  pattern: 'ByteBuf $BUFFER = $CTX.alloc().heapBuffer($SIZE << 1);

    '
  pattern-not: 'ByteBuf $BUFFER = prepareDecompressBuffer($CTX, null, $SIZE << 1);

    '
  languages:
  - java
  message: Direct allocation of decompression buffers without size limits can lead
    to resource exhaustion. Use prepareDecompressBuffer with maxAllocation to enforce
    size constraints.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/1543218d3e7afcb33a90b728b14370395a3deca0
    category: security
    cwe:
    - CWE-400
    owasp: 'A1: Injection'
    technology:
    - java
- id: vuln-netty-2caa38a2
  pattern: 'long $VAR = Long.MIN_VALUE;

    ...

    $VAR = $EXPRESSION / 1000 + ($EXPRESSION % 1000 != 0 ? 1 : 0);

    '
  pattern-not: 'int $VAR = Integer.MIN_VALUE;

    ...

    $VAR = (int) ($EXPRESSION / 1000 + ($EXPRESSION % 1000 != 0 ? 1 : 0));

    '
  languages:
  - java
  message: "Detected usage of `long` type for cookie maxAge, which can lead to overflow\
    \ issues. \nUse `int` instead to avoid potential vulnerabilities. \nThis issue\
    \ was fixed in commit 2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55.\n"
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55
    category: security
    cwe: CWE-190
    owasp: A9:2017-Using Components with Known Vulnerabilities
    references: https://github.com/netty/netty/commit/2caa38a2795fe1f1ae6ceda4d69e826ed7c55e55
    technology: java
- id: vuln-netty-185f8b27
  pattern: 'File $FILE = File.createTempFile($PREFIX, $SUFFIX, $DIRECTORY);

    $FILE.setReadable(false, false);

    $FILE.setReadable(true, true);

    '
  pattern-not: "File $FILE = File.createTempFile($PREFIX, $SUFFIX, $DIRECTORY);\n\
    if (!$FILE.setReadable(false, false)) {\n    throw new IOException(\"Failed to\
    \ set permissions on temporary file \" + $FILE);\n}\nif (!$FILE.setReadable(true,\
    \ true)) {\n    throw new IOException(\"Failed to set permissions on temporary\
    \ file \" + $FILE);\n}\n"
  languages:
  - java
  message: Insecure temporary file permissions detected. The code does not properly
    handle failures when setting file permissions, which could lead to unauthorized
    access. Ensure that file permission changes are checked and throw an IOException
    if they fail.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/185f8b2756a36aaa4f973f1a2a025e7d981823f1
    category: security
    cwe: 'CWE-276: Incorrect Default Permissions'
    owasp: A05:2021 - Security Misconfiguration
    technology: java
- id: vuln-netty-535da17e
  pattern: "public $CLASS($TYPE1 $VAR1, long $VAR2) {\n    super($VAR2);\n    ...\n\
    }\n"
  pattern-not: "public $CLASS($TYPE1 $VAR1, int $VAR2, long $VAR3) {\n    super($VAR2,\
    \ $VAR3);\n    ...\n}\n"
  languages:
  - java
  message: Missing maxClientHelloLength parameter in SSL/TLS handler constructor.
    This can lead to denial of service attacks via oversized ClientHello messages.
    Always specify a maximum length for ClientHello messages to prevent resource exhaustion.
  severity: ERROR
  metadata:
    source-url: github.com/netty/netty/commit/535da17e45201ae4278c0479e6162bb4127d4c32
    category: security
    cwe: CWE-400
    owasp: A05:2021 - Security Misconfiguration
    references: https://www.rfc-editor.org/rfc/rfc5246#section-6.2.1
    technology:
    - java
