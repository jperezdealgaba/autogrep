rules:
- id: vuln-redis-e89086e0
  pattern: 'size_t $POS = luaL_optinteger($L, $ARG, 1) - 1;

    ...

    luaL_argcheck($L, $POS + $SIZE <= $LD, $ARG2, "data string too short");

    '
  pattern-not: 'size_t $POS = luaL_optinteger($L, $ARG, 1);

    luaL_argcheck($L, $POS > 0, $ARG, "offset must be 1 or greater");

    $POS--;

    ...

    luaL_argcheck($L, $SIZE <= $LD && $POS <= $LD - $SIZE, $ARG2, "data string too
    short");

    '
  languages:
  - c
  message: 'The code contains a potential integer underflow vulnerability due to incorrect
    offset calculation.

    When `luaL_optinteger` returns a value less than 1, subtracting 1 can cause an
    underflow, leading to memory corruption or crashes.

    The fix includes a check to ensure the offset is greater than 0 before subtraction
    and corrects the bounds checking logic.

    To fix this, ensure the offset is validated before subtraction and use proper
    bounds checking.

    '
  severity: ERROR
  metadata:
    source-url: github.com/antirez/redis/commit/e89086e09a38cc6713bcd4b9c29abf92cf393936
    category: security
    cwe:
    - 'CWE-191: Integer Underflow (Wrap or Wraparound)'
    owasp:
    - 'A1: Injection'
    references:
    - https://cwe.mitre.org/data/definitions/191.html
    technology:
    - c
